import 'package:get/get.dart';
import '../../../data/models/course_model.dart';
import '../../../data/models/user_progress_model.dart';
import '../../../data/services/course_service.dart';
import '../../../data/services/user_progress_service.dart';

class DashboardController extends GetxController {
  final CourseService _courseService = CourseService();
  final UserProgressService _progressService = UserProgressService();

  // Observable list of enrolled courses
  final RxList<CourseModel> enrolledCourses = <CourseModel>[].obs;

  // Observable list of user progress
  final RxList<UserProgressModel> userProgress = <UserProgressModel>[].obs;

  // Loading state
  final RxBool isLoading = false.obs;

  // Error message
  final RxString errorMessage = ''.obs;

  // Current user ID (should be fetched from auth service)
  final RxString currentUserId = ''.obs;

  @override
  void onInit() {
    super.onInit();
    // TODO: Get current user ID from auth service
    // For now, you'll need to set this after authentication
    loadDashboardData();
  }

  @override
  void onReady() {
    super.onReady();
  }

  @override
  void onClose() {
    super.onClose();
  }

  /// Load all dashboard data
  Future<void> loadDashboardData() async {
    await Future.wait([loadEnrolledCourses(), loadUserProgress()]);
  }

  /// Load enrolled courses
  Future<void> loadEnrolledCourses() async {
    try {
      isLoading.value = true;
      errorMessage.value = '';

      final response = await _courseService.getAllCourses();

      if (response.success && response.data != null) {
        // TODO: Filter by enrolled courses based on user enrollment data
        enrolledCourses.value = response.data!;
      } else {
        errorMessage.value = response.error ?? 'Failed to load courses';
      }
    } catch (e) {
      errorMessage.value = 'Error loading courses: $e';
    } finally {
      isLoading.value = false;
    }
  }

  /// Load user progress
  Future<void> loadUserProgress() async {
    if (currentUserId.value.isEmpty) return;

    try {
      final response = await _progressService.getUserProgress(
        userId: currentUserId.value,
      );

      if (response.success && response.data != null) {
        userProgress.value = response.data!;
      }
    } catch (e) {
      print('Error loading user progress: $e');
    }
  }

  /// Get progress percentage for a course
  double getCourseProgress(String courseId) {
    final courseProgressList = userProgress
        .where((p) => p.courseId == courseId)
        .toList();

    if (courseProgressList.isEmpty) return 0.0;

    final completedLessons = courseProgressList
        .where((p) => p.isCompleted)
        .length;

    return (completedLessons / courseProgressList.length) * 100;
  }

  /// Mark lesson as completed
  Future<bool> markLessonCompleted(String courseId, String lessonId) async {
    if (currentUserId.value.isEmpty) return false;

    try {
      final progress = UserProgressModel(
        id: '', // Will be generated by backend
        userId: currentUserId.value,
        courseId: courseId,
        lessonId: lessonId,
        isCompleted: true,
        progress: 100,
      );

      final response = await _progressService.saveProgress(progress);

      if (response.success && response.data != null) {
        // Update local progress list
        final index = userProgress.indexWhere(
          (p) => p.lessonId == lessonId && p.userId == currentUserId.value,
        );

        if (index != -1) {
          userProgress[index] = response.data!;
        } else {
          userProgress.add(response.data!);
        }

        return true;
      }

      return false;
    } catch (e) {
      print('Error marking lesson as completed: $e');
      return false;
    }
  }

  /// Refresh dashboard data
  Future<void> refresh() async {
    await loadDashboardData();
  }
}
